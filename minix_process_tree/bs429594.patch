diff -rupNEZbB unchanged/usr/include/minix/callnr.h work/usr/include/minix/callnr.h
--- unchanged/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ work/usr/include/minix/callnr.h	2022-05-08 19:58:19.000000000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GETLCAPID    (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB unchanged/usr/include/unistd.h work/usr/include/unistd.h
--- unchanged/usr/include/unistd.h	2014-09-14 11:00:43.000000000 +0200
+++ work/usr/include/unistd.h	2022-05-09 02:42:44.000000000 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* getlcapid */
+pid_t getlcapid(pid_t pid_1, pid_t pid_2);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB unchanged/usr/src/include/unistd.h work/usr/src/include/unistd.h
--- unchanged/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ work/usr/src/include/unistd.h	2022-05-09 02:42:44.000000000 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* getlcapid */
+pid_t getlcapid(pid_t pid_1, pid_t pid_2);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB unchanged/usr/src/lib/libc/misc/getlcapid.c work/usr/src/lib/libc/misc/getlcapid.c
--- unchanged/usr/src/lib/libc/misc/getlcapid.c	1970-01-01 01:00:00.000000000 +0100
+++ work/usr/src/lib/libc/misc/getlcapid.c	2022-05-10 20:12:00.581666486 +0200
@@ -0,0 +1,24 @@
+#include "unistd.h"
+#include <lib.h>
+#include <minix/rs.h>
+
+static int get_pm_endpt(endpoint_t *pt) {
+    return minix_rs_lookup("pm", pt);
+}
+
+pid_t getlcapid(pid_t pid_1, pid_t pid_2) {
+    endpoint_t pm_pt;
+    message m;
+    m.m1_i1 = pid_1;
+    m.m1_i2 = pid_2;
+
+    if (get_pm_endpt(&pm_pt) != 0) {
+        errno = ENOSYS;
+        return -1;
+    }
+
+    errno = 0;
+    _syscall(pm_pt, PM_GETLCAPID, &m);
+    return (pid_t) m.m1_i1;
+}
+
diff -rupNEZbB unchanged/usr/src/lib/libc/misc/Makefile.inc work/usr/src/lib/libc/misc/Makefile.inc
--- unchanged/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ work/usr/src/lib/libc/misc/Makefile.inc	2022-05-09 02:52:26.000000000 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c getlcapid.c
diff -rupNEZbB unchanged/usr/src/minix/include/minix/callnr.h work/usr/src/minix/include/minix/callnr.h
--- unchanged/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ work/usr/src/minix/include/minix/callnr.h	2022-05-08 19:58:19.000000000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GETLCAPID    (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB unchanged/usr/src/minix/servers/pm/getlcapid.c work/usr/src/minix/servers/pm/getlcapid.c
--- unchanged/usr/src/minix/servers/pm/getlcapid.c	1970-01-01 01:00:00.000000000 +0100
+++ work/usr/src/minix/servers/pm/getlcapid.c	2022-05-11 20:43:41.281915652 +0200
@@ -0,0 +1,79 @@
+/* This file handles the PM_GETLCAPID system call. It performs the work as follows:
+ * - check if the IN_USE flag is set for both processes
+ * - if it is not, set errno to EINVAL and return -1
+ * - find the depths of both processes in the process tree, with the root's depth being zero
+ * - follow the path up the tree for each process until it's depth is equal to the others depth
+ * - check if the pids are equal. If so, check if a parent pid exists and return appropriate value
+ * - If the pids aren't equal, go up the tree for both processes until their pids are equal
+ * - return the appropriate value
+ *
+ * The entry points into this file are:
+ * - do_getlcapid: perform the PM_GETLCAPID system call
+ */
+#include "pm.h"
+#include "mproc.h"
+
+static int get_depth(pid_t pid) {
+    int depth = 0;
+    struct mproc* proc = find_proc(pid);
+    struct mproc* parent = &mproc[proc->mp_parent];
+
+    while (proc->mp_pid != parent->mp_pid) {
+        proc = parent;
+        parent = &mproc[proc->mp_parent];
+        depth++;
+    }
+
+    return depth;
+}
+
+int do_getlcapid(void) {
+    pid_t pid_1 = m_in.m1_i1;
+    pid_t pid_2 = m_in.m1_i2;
+
+    struct mproc *proc_1 = find_proc(pid_1);
+    struct mproc *proc_2 = find_proc(pid_2);
+
+/* find_proc() also checks for the IN_USE flag */
+
+    if (proc_1 == NULL || proc_2 == NULL) {
+        mp->mp_reply.m1_i1 = -1;
+        return EINVAL;
+    }
+
+    int depth_1 = get_depth(pid_1);
+    int depth_2 = get_depth(pid_2);
+
+    while (depth_1 > depth_2) {
+        proc_1 = &mproc[proc_1->mp_parent];
+        depth_1--;
+    }
+    while (depth_2 > depth_1) {
+        proc_2 = &mproc[proc_2->mp_parent];
+        depth_2--;
+    }
+
+    if (proc_1->mp_pid == proc_2->mp_pid) {
+        if (proc_1->mp_pid == mproc[proc_1->mp_parent].mp_pid) {
+            mp->mp_reply.m1_i1 = -1;
+            return ESRCH;
+        }
+        mp->mp_reply.m1_i1 = mproc[proc_1->mp_parent].mp_pid;
+        return OK;
+    }
+
+    while (proc_1->mp_pid != proc_2->mp_pid && depth_1) {
+        proc_1 = &mproc[proc_1->mp_parent];
+        proc_2 = &mproc[proc_2->mp_parent];
+        depth_1--;
+    }
+
+    if (proc_1->mp_pid != proc_2->mp_pid) {
+        mp->mp_reply.m1_i1 = -1;
+        return ESRCH;
+    }
+
+    mp->mp_reply.m1_i1 = proc_1->mp_pid;
+    return OK;
+}
+
diff -rupNEZbB unchanged/usr/src/minix/servers/pm/Makefile work/usr/src/minix/servers/pm/Makefile
--- unchanged/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ work/usr/src/minix/servers/pm/Makefile	2022-05-09 13:37:30.737306000 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c getlcapid.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB unchanged/usr/src/minix/servers/pm/proto.h work/usr/src/minix/servers/pm/proto.h
--- unchanged/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ work/usr/src/minix/servers/pm/proto.h	2022-05-09 10:33:06.000000000 +0200
@@ -46,6 +46,7 @@ int do_getepinfo(void);
 int do_svrctl(void);
 int do_getsetpriority(void);
 int do_getrusage(void);
+int do_getlcapid(void);
 
 /* schedule.c */
 void sched_init(void);
diff -rupNEZbB unchanged/usr/src/minix/servers/pm/table.c work/usr/src/minix/servers/pm/table.c
--- unchanged/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ work/usr/src/minix/servers/pm/table.c	2022-05-10 12:32:23.514860551 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(PM_GETLCAPID)  = do_getlcapid
 };
